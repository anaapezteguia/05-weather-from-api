{"version":3,"sources":["components/Header.js","components/Error.js","components/Form.js","components/Weather.js","App.js","index.js"],"names":["Header","title","className","href","Error","message","Form","search","setSearch","setQuery","city","country","useState","error","setError","handleChange","ev","target","name","value","onSubmit","preventDefault","trim","type","id","onChange","htmlFor","Weather","result","main","sys","kelvin","parseFloat","temp","toFixed","temp_max","temp_min","App","component","query","setResult","useEffect","a","process","url","fetch","response","json","cod","fetchAPI","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.feda102c.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Header = ({ title }) => {\n  return (\n    <nav>\n      <div className=\"nav-wrapper light-blue darken-2\">\n        <a href=\"#!\" className=\"brand-logo\">\n          {/* we have to disable the href because of Materialize options*/}\n          {title}\n        </a>\n      </div>\n    </nav>\n  );\n};\n\nHeader.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Error = ({ message }) => {\n  return <p className=\"red darken-4 error\">{message}</p>;\n};\n\nError.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Error;\n","import React, { useState } from 'react';\nimport Error from './Error';\nimport PropTypes from 'prop-types';\n\nconst Form = ({ search, setSearch, setQuery }) => {\n  // extract city and country\n  const { city, country } = search;\n  // handler\n  const [error, setError] = useState(false);\n\n  const handleChange = (ev) => {\n    // update state\n    setSearch({\n      ...search,\n      [ev.target.name]: ev.target.value,\n    });\n  };\n  const handleSubmit = (ev) => {\n    ev.preventDefault();\n\n    // validation\n    if (city.trim() === '' || country.trim() === '') {\n      setError(true);\n      return;\n    }\n    setError(false);\n    // pass to main component\n    setQuery(true);\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      {error ? <Error message=\"All fields are required\" /> : null}\n      <div className=\"input-field col s12\">\n        <input\n          type=\"text\"\n          name=\"city\"\n          id=\"city\"\n          value={city}\n          onChange={handleChange}\n        />\n        <label htmlFor=\"city\">City: </label>\n      </div>\n      <div className=\"input-field col s12\">\n        <select\n          name=\"country\"\n          id=\"country\"\n          value={country}\n          onChange={handleChange}\n        >\n          <option value=\"\">-- Select country --</option>\n          <option value=\"US\">Estados Unidos</option>\n          <option value=\"MX\">México</option>\n          <option value=\"AR\">Argentina</option>\n          <option value=\"CO\">Colombia</option>\n          <option value=\"CR\">Costa Rica</option>\n          <option value=\"ES\">España</option>\n          <option value=\"PE\">Perú</option>\n        </select>\n        <label htmlFor=\"country\">Country: </label>\n      </div>\n      <div className=\"input-field col s12\">\n        <button\n          type=\"submit\"\n          className=\"waves-effect waves-light btn-large btn-block yellow accent-4 col s12\"\n        >\n          Search weather\n        </button>\n      </div>\n    </form>\n  );\n};\n\nForm.propTypes = {\n  search: PropTypes.object.isRequired,\n  setSearch: PropTypes.func.isRequired,\n  setQuery: PropTypes.func.isRequired,\n};\n\nexport default Form;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Weather = ({ result }) => {\n  // extract values\n  const { name, main, sys } = result;\n\n  if (!name) return null;\n\n  // Kelvin degrees\n  const kelvin = 273.15;\n\n  return (\n    <div className=\"card-panel white col s12\">\n      <div className=\"black-text\">\n        <h2>\n          The weather in {name} ({sys.country}) is:\n        </h2>\n        <p className=\"temperatura\">\n          {/* conversion to Celsius */}\n          {parseFloat(main.temp - kelvin, 10).toFixed(2)}\n          <span> &#x2103;</span>\n        </p>\n        <p>\n          Max. temperature: {parseFloat(main.temp_max - kelvin, 10).toFixed(2)}\n          <span> &#x2103;</span>\n        </p>\n        <p>\n          Min. temperature: {parseFloat(main.temp_min - kelvin, 10).toFixed(2)}\n          <span> &#x2103;</span>\n        </p>\n      </div>\n    </div>\n  );\n};\n\nWeather.propTypes = {\n  result: PropTypes.object.isRequired,\n};\n\nexport default Weather;\n","import React, { useState, useEffect } from 'react';\nimport Header from './components/Header';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\nimport Error from './components/Error';\n\nfunction App() {\n  // form state\n  const [search, setSearch] = useState({\n    city: '',\n    country: '',\n  });\n  const [query, setQuery] = useState(false);\n  const [result, setResult] = useState({});\n  const [error, setError] = useState(false);\n\n  // extract city and country\n  const { city, country } = search;\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      if (query) {\n        //in order to avoid exposing the API key we have to protect it\n        // https://create-react-app.dev/docs/adding-custom-environment-variables/\n        const appId = process.env.REACT_APP_WEATHER_API_KEY;\n        const url = `//api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${appId}`;\n        const response = await fetch(url);\n        const result = await response.json();\n        setResult(result);\n        setQuery(false);\n\n        // detect errors in query\n        if (result.cod === '404') {\n          setError(true);\n        } else {\n          setError(false);\n        }\n      }\n    };\n    fetchAPI();\n    // eslint-disable-next-line\n  }, [query]);\n\n  // conditional component load\n  let component;\n  if (error) {\n    component = <Error message=\"There are no results to be shown\" />;\n  } else {\n    component = <Weather result={result} />;\n  }\n\n  return (\n    <>\n      <Header title=\"Weather React App\" />\n      <div className=\"contenedor-form\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col m6 s12\">\n              <Form search={search} setSearch={setSearch} setQuery={setQuery} />\n            </div>\n            <div className=\"col m6 s12\">{component}</div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}